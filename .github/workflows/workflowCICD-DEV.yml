name: workflowCICD-DEV

on:
  push:
    branches:
      - release
  
jobs:
  job-CD-DEV:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_DATABASE: dchat
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASS }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_PASS }}
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
        
    steps:
      - name: Setando conexao SSH da Google Cloud
        run: |
          mkdir -p ~/.ssh/	
          echo "$SSH_KEY" > ~/.ssh/google-cloud.key
          chmod 600 ~/.ssh/google-cloud.key
          cat >>~/.ssh/config <<END
          Host google-cloud
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/google-cloud.key
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.GOOGLE_CLOUD_USER }}
          SSH_KEY: ${{ secrets.GOOGLE_CLOUD_SSH }}
          SSH_HOST: ${{ secrets.GOOGLE_CLOUD_IP }}
    
      - name: Checkout repo
        uses: actions/checkout@v3
      
      - name: Obtendo java 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Obtendo nodejs 16
        uses: actions/setup-node@v3
        with: 
          node-version: 16.x
        
      - name: Instalando dependencias e angular
        run: |
          cd frontend/gmusic/
          npm install
          npm cache clean --force
          npm cache verify
          npm install -g @angular/cli
          ng config -g cli.warnings.versionMismatch false
          ng analytics off
          
          
      - name: Setando properties
        run: |
          cat > backend/api/src/main/resources/application.properties << EOF
          spring.jpa.hibernate.ddl-auto=update
          spring.datasource.url=jdbc:mysql://localhost:3306/dchat
          spring.datasource.username=$MYSQL_USER
          spring.datasource.password=$MYSQL_PASS
          spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
          EOF
        env:
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASS: ${{ secrets.MYSQL_PASS }}
          
      - name: Fazendo build com Maven
        run: |
          cd backend/api/
          mvn --batch-mode --update-snapshots package
      
      - name: Fazendo Build DEV
        run: |
          cd frontend/gmusic/
          ng build
      
#      - name: Fazendo Deploy no ambiente de DEV(release)
#        run: |
#          ssh google-cloud 'sudo systemctl stop nginx'
#          ssh google-cloud 'sudo systemctl stop java-api'
#          ssh google-cloud 'sudo rm -fr /usr/share/nginx/dev/*'
#          ssh google-cloud 'sudo rm -fr /home/azureuser/teste/build/*'
#          cd frontend/gmusic/dist
#          scp -r gmusic google-cloud:/home/azureuser/teste/build/
#          ssh azure-cloud 'sudo cp -r /home/azureuser/teste/build/gmusic/* /var/www/html/'
#          cd ..
#          cd ..
#          cd ..
#          cd backend/api/target
#          scp -r api-0.0.1-SNAPSHOT.jar azure-cloud:/home/azureuser/teste/
#          ssh google-cloud 'sudo systemctl start nginx'
#          ssh google-cloud 'sudo systemctl start java-api'
          
          
      - name: Deploy Docker Spring
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
          docker build ./backend/api -t $DOCKER_USER/projeto:latest
          docker push $DOCKER_USER/projeto:latest
          
      - name: Deploy Docker Angular
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
          docker build ./frontend/gmusic -t $DOCKER_USER/angular:latest
          docker push $DOCKER_USER/angular:latest
  
