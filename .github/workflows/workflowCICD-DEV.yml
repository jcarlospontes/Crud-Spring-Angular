name: workflowCICD-DEV

on:
  push:
    branches:
      - release
  
jobs:
  #build e deploy da aplicacao  
  job-CD-DEV:
    runs-on: ubuntu-latest
#    services:
#      #mysql para fazer build da api
#      mysql:
#        image: mysql:latest
#        env:
#          MYSQL_DATABASE: dchat
#          MYSQL_USER: ${{ secrets.MYSQL_USER }}
#          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASS }}
#          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_PASS }}
#        ports:
#          - 3306:3306
#        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      
 #     - name: Obtendo java 17
 #       uses: actions/setup-java@v3
 #       with:
 #         java-version: '17'
 #         distribution: 'temurin'

      - name: Obtendo Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      - name: Obtendo nodejs 16
        uses: actions/setup-node@v3
        with: 
          node-version: 16.x
        
      - name: Instalando dependencias e angular
        run: |
          cd frontend/gmusic/
          npm install
          npm cache clean --force
          npm cache verify
          npm install -g @angular/cli
          ng config -g cli.warnings.versionMismatch false
          ng analytics off
          
      - name: Setando properties
        run: |
          cat > backend/api/src/main/resources/application.properties << EOF
          spring.jpa.hibernate.ddl-auto=update
          spring.datasource.url=jdbc:mysql://localhost:3306/dchat
          spring.datasource.username=$MYSQL_USER
          spring.datasource.password=$MYSQL_PASS
          spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
          EOF
          cat > backend/go-crud-api/.env << EOF
          PORT=8080
          DB_URL=$DB_URL
          EOF
        env:
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASS: ${{ secrets.MYSQL_PASS }}
          DB_URL: ${{ secrets.DBURL }}
          
    
  #    - name: Fazendo build da api Spring Boot
  #      run: |
  #        cd backend/api/
  #        mvn --batch-mode --update-snapshots package
      
      - name: Fazendo Build do Angular
        run: |
          cd frontend/gmusic/
          ng build
          
      - name: Fazendo Build do Go
        run: |
          cd backend/go-crud-api/
          go build
    
      #Push de imagens da aplicação
    #  - name: Deploy Docker Spring API
    #    env:
    #      DOCKER_USER: ${{ secrets.DOCKER_USER }}
    #      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    #    run: |
    #      docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
    #      docker build ./backend/api -t $DOCKER_USER/projeto:latest
    #      docker push $DOCKER_USER/projeto:latest
          
      - name: Deploy Docker Go API
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
          docker build ./backend/go-crud-api -t $DOCKER_USER/apigo:latest
          docker push $DOCKER_USER/apigo:latest
          
      - name: Deploy Docker Angular
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
          docker build ./frontend/gmusic -t $DOCKER_USER/angular:latest
          docker push $DOCKER_USER/angular:latest
          
          
      - name: Setando conexao SSH da maquina do front e do back
        run: |
          mkdir -p ~/.ssh/	
          echo "$SSH_KEY_FRONT" > ~/.ssh/azure-front-cloud.key
          echo "$SSH_KEY_BACK" > ~/.ssh/azure-back-cloud.key
          chmod 600 ~/.ssh/azure-front-cloud.key
          chmod 600 ~/.ssh/azure-back-cloud.key
          cat >>~/.ssh/config <<END
          Host azure-front-cloud
            HostName $SSH_HOST_FRONT
            User $SSH_USER_FRONT
            IdentityFile ~/.ssh/azure-front-cloud.key
            StrictHostKeyChecking no
          Host azure-back-cloud
            HostName $SSH_HOST_BACK
            User $SSH_USER_BACK
            IdentityFile ~/.ssh/azure-back-cloud.key
            StrictHostKeyChecking no
          END
        env:
          SSH_USER_FRONT: ${{ secrets.AZURE_FRONT_CLOUD_USER }}
          SSH_KEY_FRONT: ${{ secrets.AZURE_FRONT_CLOUD_SSH }}
          SSH_HOST_FRONT: ${{ secrets.AZURE_FRONT_CLOUD_IP }}
          SSH_USER_BACK: ${{ secrets.AZURE_BACK_CLOUD_USER }}
          SSH_KEY_BACK: ${{ secrets.AZURE_BACK_CLOUD_SSH }}
          SSH_HOST_BACK: ${{ secrets.AZURE_BACK_CLOUD_IP }}
          
      - name: Fazendo Deploy do back
        run: |
          ssh azure-back-cloud 'sudo docker-compose down'
          ssh azure-back-cloud 'sudo docker rmi joaocarlosp/apigo'
          ssh azure-back-cloud 'sudo docker pull joaocarlosp/apigo'
          ssh azure-back-cloud 'sudo docker-compose up -d'
          
      - name: Fazendo Deploy do front
        run: |
          ssh azure-front-cloud 'sudo docker stop angular'
          ssh azure-front-cloud 'sudo docker rm angular'
          ssh azure-front-cloud 'sudo docker rmi joaocarlosp/angular'
          ssh azure-front-cloud 'sudo docker pull joaocarlosp/angular:latest'
          ssh azure-front-cloud 'sudo docker run --name angular -d -p 4200:80 joaocarlosp/angular:latest'
